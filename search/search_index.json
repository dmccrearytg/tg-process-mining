{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TigerGraph Process Mining","text":"<p>Welcome to the TigerGraph Process Mining website.</p> <p>Graph databases are an excellent fit for process mining applications because they are designed to handle highly interconnected data, making it easy to model and analyze complex business processes. Unlike traditional relational databases, which can struggle with the intricate relationships and dependencies inherent in process data, graph databases like TigerGraph excel at traversing relationships quickly and efficiently. This allows for real-time analysis of process flows, enabling organizations to identify bottlenecks, deviations, and optimization opportunities with greater precision.</p> <p>The ability to easily scale and handle large volumes of event data further enhances the suitability of graph databases for process mining, providing a powerful tool for uncovering actionable insights in even the most complex process landscapes.</p>"},{"location":"#predicting-workflow-times","title":"Predicting Workflow Times","text":"<p>Machine learning, particularly when combined with Graph Neural Networks (GNNs), can significantly enhance process mining by predicting the time required to complete a business process. GNNs are specifically designed to work with graph-structured data, making them ideal for capturing the dependencies and sequential patterns within complex processes. By training GNN models on historical process data, organizations can accurately forecast the duration of future processes based on their current state and past performance. This predictive capability allows businesses to proactively manage their workflows, optimize resource allocation, and anticipate potential delays, leading to more efficient and reliable operations.</p>"},{"location":"about/","title":"About the TigerGraph Process Mining Website","text":"<p>Unlock the Power of Your Processes</p> <p>In today's fast-paced business environment, understanding and optimizing your processes is crucial for staying competitive. Our new platform demonstrates how TigerGraph, a leading graph database, can revolutionize process mining, providing unparalleled insights into your business operations.</p> <p>Why Process Mining with TigerGraph?</p> <p>Process mining involves analyzing business processes based on event logs, helping organizations uncover inefficiencies, deviations, and opportunities for improvement. Traditional approaches often struggle with the complexity and interconnected nature of these processes. This is where TigerGraph excels.</p> <p>Key Benefits of Using TigerGraph for Process Mining:</p> <ol> <li> <p>Unrivaled Connectivity: Graph databases are inherently designed to manage and analyze interconnected data. TigerGraph's native graph architecture allows for the seamless exploration of complex relationships within your business processes, ensuring no detail is overlooked.</p> </li> <li> <p>Real-Time Analytics: With TigerGraph's high-performance capabilities, you can perform real-time analysis on your processes, enabling you to identify bottlenecks and inefficiencies as they happen, rather than after the fact.</p> </li> <li> <p>Scalability: TigerGraph's distributed architecture ensures that your process mining application can scale effortlessly, handling vast amounts of data without compromising on performance. This is especially critical as your organization grows and processes become more intricate.</p> </li> <li> <p>Complex Querying Made Simple: Process mining requires complex queries that span multiple entities and relationships. TigerGraph's powerful query language, GSQL, allows you to write sophisticated queries that can capture the nuances of your processes, providing deeper insights than traditional database systems.</p> </li> <li> <p>Enhanced Visualization: Visualizing processes and their interactions is a core part of process mining. TigerGraph integrates seamlessly with various visualization tools, enabling you to create dynamic and intuitive process maps that bring your data to life.</p> </li> </ol> <p>Explore Our Solutions</p> <p>Discover how TigerGraph can be leveraged to transform your approach to process mining. Our platform provides a comprehensive guide on implementing process mining applications using TigerGraph, complete with tutorials, case studies, and best practices.</p> <p>Join the Revolution</p> <p>Don't get left behind in the data-driven era. Explore how TigerGraph can empower your organization to achieve unparalleled process efficiency and insight. Start your journey with us today!</p>"},{"location":"contact/","title":"Contact","text":"<p>Dan McCreary LinkedIn</p>"},{"location":"data-model/","title":"Customer 360 Data Model","text":""},{"location":"concepts/","title":"Process Mining Concepts","text":""},{"location":"concepts/gnn/","title":"Use of GNNs to Predict Future Events","text":"<p>Graph Neural Networks (GNNs) can be used to predict future events in a graph where the vertices represent events, and the edges (e.g., <code>NEXT_EVENT</code> and <code>PREV_EVENT</code>) contain information such as duration. Here's how this can be done:</p>"},{"location":"concepts/gnn/#1-graph-representation","title":"1. Graph Representation:","text":"<ul> <li>Vertices: Each vertex in the graph represents an event.</li> <li>Edges: The edges represent the relationship between events, such as which event follows another (<code>NEXT_EVENT</code>) or precedes another (<code>PREV_EVENT</code>). These edges contain a <code>duration</code> attribute that indicates the time between the events.</li> </ul>"},{"location":"concepts/gnn/#2-feature-representation","title":"2. Feature Representation:","text":"<ul> <li>Vertex Features: Each event vertex can have features like event type, timestamp, associated data, etc.</li> <li>Edge Features: The edges contain the duration, which is a crucial feature for predicting the timing of future events.</li> </ul>"},{"location":"concepts/gnn/#3-graph-construction-for-gnn","title":"3. Graph Construction for GNN:","text":"<ul> <li>The graph is constructed where the event vertices are connected via directed edges (<code>NEXT_EVENT</code>/<code>PREV_EVENT</code>) with the duration as a feature of the edge.</li> <li>This graph is then fed into a GNN, where the model can learn the temporal and sequential dependencies between events.</li> </ul>"},{"location":"concepts/gnn/#4-gnn-model-architecture","title":"4. GNN Model Architecture:","text":"<ul> <li>Input Layer: The input layer processes the features of the event vertices and the edge features (durations).</li> <li>Graph Convolutional Layers: These layers propagate information between connected vertices. For instance, a message-passing mechanism can aggregate information from neighboring events (previous or next) to update the representation of the current event vertex.</li> <li>Temporal Embedding: The duration feature can be explicitly used to create temporal embeddings that allow the model to learn the time-based dependencies between events.</li> <li>Recurrent Layer (optional): In some cases, a recurrent layer (like an LSTM or GRU) can be used to model the sequential nature of events further.</li> </ul>"},{"location":"concepts/gnn/#5-training-the-gnn","title":"5. Training the GNN:","text":"<ul> <li>Loss Function: The loss function is typically designed to minimize the difference between predicted and actual future event times or to classify the type of future event correctly.</li> <li>Supervision: The model can be supervised by using historical event sequences where the ground truth for future events is known.</li> </ul>"},{"location":"concepts/gnn/#6-prediction-process","title":"6. Prediction Process:","text":"<ul> <li>Prediction: For a given current graph of events, the trained GNN can predict the next event(s) by considering the learned relationships (from the graph structure and edge durations) and output a prediction for the next event's occurrence time or the type of event that will happen next.</li> <li>Inference: During inference, you can use the GNN to predict not just the immediate next event but potentially a sequence of future events by iteratively updating the graph with predicted events and re-applying the model.</li> </ul>"},{"location":"concepts/gnn/#7-handling-duration-in-prediction","title":"7. Handling Duration in Prediction:","text":"<ul> <li>The duration between events is key to predicting future events. The GNN uses the duration in the edge features to inform predictions of the timing of future events.</li> <li>By learning from the historical duration data, the model can predict how long until the next event occurs.</li> </ul>"},{"location":"concepts/gnn/#8-example-use-case","title":"8. Example Use Case:","text":"<ul> <li>Suppose you have a graph where each vertex represents a customer order event, and edges represent the sequence of orders, with the duration representing the time between orders.</li> <li>The GNN can learn to predict when the next order will happen based on the past sequence of orders and durations between them.</li> </ul>"},{"location":"concepts/gnn/#9-potential-gnn-models","title":"9. Potential GNN Models:","text":"<ul> <li>Graph Convolutional Networks (GCN): To learn node embeddings considering the local structure.</li> <li>Graph Attention Networks (GAT): To learn which events (nodes) are more influential when predicting the next event.</li> <li>Temporal GNNs: Specifically designed to handle temporal information and predict future events.</li> </ul>"},{"location":"concepts/gnn/#10-implementation-tips","title":"10. Implementation Tips:","text":"<ul> <li>Data Preparation: Ensure that your graph data is prepared with the correct vertex and edge features, especially focusing on accurate duration data.</li> <li>Model Tuning: Experiment with different GNN architectures and hyperparameters, such as the number of layers, embedding size, and learning rate, to optimize performance.</li> <li>Temporal Information: Consider incorporating additional temporal features, such as time of day or day of the week, which could improve predictions.</li> </ul> <p>By applying a GNN in this manner, you can effectively model and predict future events in a graph, leveraging the sequential and temporal relationships embedded in the graph's structure and edge features.</p>"}]}